// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calc_genetic_sim
NumericMatrix calc_genetic_sim(const NumericVector& prob_array);
RcppExport SEXP qtl2geno_calc_genetic_sim(SEXP prob_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type prob_array(prob_arraySEXP);
    __result = Rcpp::wrap(calc_genetic_sim(prob_array));
    return __result;
END_RCPP
}
// crosstype_supported
bool crosstype_supported(const String& crosstype);
RcppExport SEXP qtl2geno_crosstype_supported(SEXP crosstypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    __result = Rcpp::wrap(crosstype_supported(crosstype));
    return __result;
END_RCPP
}
// count_invalid_genotypes
IntegerVector count_invalid_genotypes(const String& crosstype, const IntegerMatrix& genotypes, const bool& is_X_chr, const LogicalVector& is_female, const IntegerMatrix& cross_info);
RcppExport SEXP qtl2geno_count_invalid_genotypes(SEXP crosstypeSEXP, SEXP genotypesSEXP, SEXP is_X_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type is_X_chr(is_X_chrSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type cross_info(cross_infoSEXP);
    __result = Rcpp::wrap(count_invalid_genotypes(crosstype, genotypes, is_X_chr, is_female, cross_info));
    return __result;
END_RCPP
}
// check_crossinfo
bool check_crossinfo(const String& crosstype, const IntegerMatrix& cross_info, const bool any_x_chr);
RcppExport SEXP qtl2geno_check_crossinfo(SEXP crosstypeSEXP, SEXP cross_infoSEXP, SEXP any_x_chrSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type cross_info(cross_infoSEXP);
    Rcpp::traits::input_parameter< const bool >::type any_x_chr(any_x_chrSEXP);
    __result = Rcpp::wrap(check_crossinfo(crosstype, cross_info, any_x_chr));
    return __result;
END_RCPP
}
// check_is_female_vector
bool check_is_female_vector(const String& crosstype, const LogicalVector& is_female, const bool any_x_chr);
RcppExport SEXP qtl2geno_check_is_female_vector(SEXP crosstypeSEXP, SEXP is_femaleSEXP, SEXP any_x_chrSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const bool >::type any_x_chr(any_x_chrSEXP);
    __result = Rcpp::wrap(check_is_female_vector(crosstype, is_female, any_x_chr));
    return __result;
END_RCPP
}
// check_handle_x_chr
bool check_handle_x_chr(const String& crosstype, const bool any_x_chr);
RcppExport SEXP qtl2geno_check_handle_x_chr(SEXP crosstypeSEXP, SEXP any_x_chrSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const bool >::type any_x_chr(any_x_chrSEXP);
    __result = Rcpp::wrap(check_handle_x_chr(crosstype, any_x_chr));
    return __result;
END_RCPP
}
// genoprob_to_alleleprob
NumericVector genoprob_to_alleleprob(const String& crosstype, const NumericVector& prob_array, const bool is_x_chr);
RcppExport SEXP qtl2geno_genoprob_to_alleleprob(SEXP crosstypeSEXP, SEXP prob_arraySEXP, SEXP is_x_chrSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prob_array(prob_arraySEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    __result = Rcpp::wrap(genoprob_to_alleleprob(crosstype, prob_array, is_x_chr));
    return __result;
END_RCPP
}
// calc_genoprob
NumericVector calc_genoprob(const String& crosstype, const IntegerMatrix& genotypes, const IntegerMatrix& founder_geno, const bool is_X_chr, const LogicalVector& is_female, const IntegerMatrix& cross_info, const NumericVector& rec_frac, const IntegerVector& marker_index, const double error_prob);
RcppExport SEXP qtl2geno_calc_genoprob(SEXP crosstypeSEXP, SEXP genotypesSEXP, SEXP founder_genoSEXP, SEXP is_X_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP, SEXP rec_fracSEXP, SEXP marker_indexSEXP, SEXP error_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type founder_geno(founder_genoSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_X_chr(is_X_chrSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type cross_info(cross_infoSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rec_frac(rec_fracSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type marker_index(marker_indexSEXP);
    Rcpp::traits::input_parameter< const double >::type error_prob(error_probSEXP);
    __result = Rcpp::wrap(calc_genoprob(crosstype, genotypes, founder_geno, is_X_chr, is_female, cross_info, rec_frac, marker_index, error_prob));
    return __result;
END_RCPP
}
// est_map
NumericVector est_map(const String& crosstype, const IntegerMatrix& genotypes, const IntegerMatrix& founder_geno, const bool is_X_chr, const LogicalVector& is_female, const IntegerMatrix& cross_info, const NumericVector& rec_frac, const double error_prob, const int max_iterations, const double tol, const bool verbose);
RcppExport SEXP qtl2geno_est_map(SEXP crosstypeSEXP, SEXP genotypesSEXP, SEXP founder_genoSEXP, SEXP is_X_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP, SEXP rec_fracSEXP, SEXP error_probSEXP, SEXP max_iterationsSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type founder_geno(founder_genoSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_X_chr(is_X_chrSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type cross_info(cross_infoSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type rec_frac(rec_fracSEXP);
    Rcpp::traits::input_parameter< const double >::type error_prob(error_probSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(est_map(crosstype, genotypes, founder_geno, is_X_chr, is_female, cross_info, rec_frac, error_prob, max_iterations, tol, verbose));
    return __result;
END_RCPP
}
// addlog
double addlog(const double a, const double b);
RcppExport SEXP qtl2geno_addlog(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    __result = Rcpp::wrap(addlog(a, b));
    return __result;
END_RCPP
}
// test_init
double test_init(const String& crosstype, const int true_gen, const bool is_x_chr, const bool is_female, const IntegerVector& cross_info);
RcppExport SEXP qtl2geno_test_init(SEXP crosstypeSEXP, SEXP true_genSEXP, SEXP is_x_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const int >::type true_gen(true_genSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cross_info(cross_infoSEXP);
    __result = Rcpp::wrap(test_init(crosstype, true_gen, is_x_chr, is_female, cross_info));
    return __result;
END_RCPP
}
// test_emit
double test_emit(const String& crosstype, const int obs_gen, const int true_gen, const double error_prob, const IntegerVector& founder_geno, const bool is_x_chr, const bool is_female, const IntegerVector& cross_info);
RcppExport SEXP qtl2geno_test_emit(SEXP crosstypeSEXP, SEXP obs_genSEXP, SEXP true_genSEXP, SEXP error_probSEXP, SEXP founder_genoSEXP, SEXP is_x_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const int >::type obs_gen(obs_genSEXP);
    Rcpp::traits::input_parameter< const int >::type true_gen(true_genSEXP);
    Rcpp::traits::input_parameter< const double >::type error_prob(error_probSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type founder_geno(founder_genoSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cross_info(cross_infoSEXP);
    __result = Rcpp::wrap(test_emit(crosstype, obs_gen, true_gen, error_prob, founder_geno, is_x_chr, is_female, cross_info));
    return __result;
END_RCPP
}
// test_step
double test_step(const String& crosstype, const int gen_left, const int gen_right, const double rec_frac, const bool is_x_chr, const bool is_female, const IntegerVector& cross_info);
RcppExport SEXP qtl2geno_test_step(SEXP crosstypeSEXP, SEXP gen_leftSEXP, SEXP gen_rightSEXP, SEXP rec_fracSEXP, SEXP is_x_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const int >::type gen_left(gen_leftSEXP);
    Rcpp::traits::input_parameter< const int >::type gen_right(gen_rightSEXP);
    Rcpp::traits::input_parameter< const double >::type rec_frac(rec_fracSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cross_info(cross_infoSEXP);
    __result = Rcpp::wrap(test_step(crosstype, gen_left, gen_right, rec_frac, is_x_chr, is_female, cross_info));
    return __result;
END_RCPP
}
// test_check_geno
bool test_check_geno(const String& crosstype, const int gen, const bool is_observed_value, const bool is_x_chr, const bool is_female, const IntegerVector& cross_info);
RcppExport SEXP qtl2geno_test_check_geno(SEXP crosstypeSEXP, SEXP genSEXP, SEXP is_observed_valueSEXP, SEXP is_x_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const int >::type gen(genSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_observed_value(is_observed_valueSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cross_info(cross_infoSEXP);
    __result = Rcpp::wrap(test_check_geno(crosstype, gen, is_observed_value, is_x_chr, is_female, cross_info));
    return __result;
END_RCPP
}
// test_possible_gen
IntegerVector test_possible_gen(const String& crosstype, const bool is_x_chr, const bool is_female, const IntegerVector& cross_info);
RcppExport SEXP qtl2geno_test_possible_gen(SEXP crosstypeSEXP, SEXP is_x_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cross_info(cross_infoSEXP);
    __result = Rcpp::wrap(test_possible_gen(crosstype, is_x_chr, is_female, cross_info));
    return __result;
END_RCPP
}
// test_ngen
int test_ngen(const String& crosstype, const bool is_x_chr);
RcppExport SEXP qtl2geno_test_ngen(SEXP crosstypeSEXP, SEXP is_x_chrSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    __result = Rcpp::wrap(test_ngen(crosstype, is_x_chr));
    return __result;
END_RCPP
}
// test_nrec
double test_nrec(const String& crosstype, const int gen_left, const int gen_right, const bool is_x_chr, const bool is_female, const IntegerVector& cross_info);
RcppExport SEXP qtl2geno_test_nrec(SEXP crosstypeSEXP, SEXP gen_leftSEXP, SEXP gen_rightSEXP, SEXP is_x_chrSEXP, SEXP is_femaleSEXP, SEXP cross_infoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const String& >::type crosstype(crosstypeSEXP);
    Rcpp::traits::input_parameter< const int >::type gen_left(gen_leftSEXP);
    Rcpp::traits::input_parameter< const int >::type gen_right(gen_rightSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_x_chr(is_x_chrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_female(is_femaleSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cross_info(cross_infoSEXP);
    __result = Rcpp::wrap(test_nrec(crosstype, gen_left, gen_right, is_x_chr, is_female, cross_info));
    return __result;
END_RCPP
}
