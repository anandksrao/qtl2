// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// calc_genetic_sim
NumericMatrix calc_genetic_sim(const NumericVector& prob_array);
RcppExport SEXP qtl2scan_calc_genetic_sim(SEXP prob_arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type prob_array(prob_arraySEXP);
    __result = Rcpp::wrap(calc_genetic_sim(prob_array));
    return __result;
END_RCPP
}
// fit_linreg_eigenchol
List fit_linreg_eigenchol(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_fit_linreg_eigenchol(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(fit_linreg_eigenchol(X, y));
    return __result;
END_RCPP
}
// calc_rss_eigenchol
double calc_rss_eigenchol(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_calc_rss_eigenchol(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(calc_rss_eigenchol(X, y));
    return __result;
END_RCPP
}
// fit_linreg_eigenqr
List fit_linreg_eigenqr(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_fit_linreg_eigenqr(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(fit_linreg_eigenqr(X, y));
    return __result;
END_RCPP
}
// calc_rss_eigenqr
double calc_rss_eigenqr(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_calc_rss_eigenqr(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(calc_rss_eigenqr(X, y));
    return __result;
END_RCPP
}
// calc_mvrss_eigenchol
NumericVector calc_mvrss_eigenchol(const NumericMatrix X, const NumericMatrix Y);
RcppExport SEXP qtl2scan_calc_mvrss_eigenchol(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP);
    __result = Rcpp::wrap(calc_mvrss_eigenchol(X, Y));
    return __result;
END_RCPP
}
// calc_mvrss_eigenqr
NumericVector calc_mvrss_eigenqr(const NumericMatrix X, const NumericMatrix Y);
RcppExport SEXP qtl2scan_calc_mvrss_eigenqr(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP);
    __result = Rcpp::wrap(calc_mvrss_eigenqr(X, Y));
    return __result;
END_RCPP
}
// calc_rss_lapack
NumericVector calc_rss_lapack(const NumericMatrix X, const NumericMatrix Y, const bool skip_dgels, const double tol);
RcppExport SEXP qtl2scan_calc_rss_lapack(SEXP XSEXP, SEXP YSEXP, SEXP skip_dgelsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool >::type skip_dgels(skip_dgelsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(calc_rss_lapack(X, Y, skip_dgels, tol));
    return __result;
END_RCPP
}
// cbind_imatrix
IntegerMatrix cbind_imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2);
RcppExport SEXP qtl2scan_cbind_imatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(cbind_imatrix(mat1, mat2));
    return __result;
END_RCPP
}
// cbind_3imatrix
IntegerMatrix cbind_3imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2, const IntegerMatrix& mat3);
RcppExport SEXP qtl2scan_cbind_3imatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(cbind_3imatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
// cbind_nmatrix
NumericMatrix cbind_nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2);
RcppExport SEXP qtl2scan_cbind_nmatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(cbind_nmatrix(mat1, mat2));
    return __result;
END_RCPP
}
// cbind_3nmatrix
NumericMatrix cbind_3nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2, const NumericMatrix& mat3);
RcppExport SEXP qtl2scan_cbind_3nmatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(cbind_3nmatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
// rbind_imatrix
IntegerMatrix rbind_imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2);
RcppExport SEXP qtl2scan_rbind_imatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(rbind_imatrix(mat1, mat2));
    return __result;
END_RCPP
}
// rbind_3imatrix
IntegerMatrix rbind_3imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2, const IntegerMatrix& mat3);
RcppExport SEXP qtl2scan_rbind_3imatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(rbind_3imatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
// rbind_nmatrix
NumericMatrix rbind_nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2);
RcppExport SEXP qtl2scan_rbind_nmatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(rbind_nmatrix(mat1, mat2));
    return __result;
END_RCPP
}
// rbind_3nmatrix
NumericMatrix rbind_3nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2, const NumericMatrix& mat3);
RcppExport SEXP qtl2scan_rbind_3nmatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(rbind_3nmatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
