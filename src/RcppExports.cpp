// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// fit_linreg_eigenchol
List fit_linreg_eigenchol(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2_fit_linreg_eigenchol(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        List __result = fit_linreg_eigenchol(X, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_rss_eigenchol
double calc_rss_eigenchol(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2_calc_rss_eigenchol(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        double __result = calc_rss_eigenchol(X, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fit_linreg_eigenqr
List fit_linreg_eigenqr(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2_fit_linreg_eigenqr(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        List __result = fit_linreg_eigenqr(X, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_rss_eigenqr
double calc_rss_eigenqr(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2_calc_rss_eigenqr(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        double __result = calc_rss_eigenqr(X, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_mvrss_eigenchol
NumericVector calc_mvrss_eigenchol(const NumericMatrix X, const NumericMatrix Y);
RcppExport SEXP qtl2_calc_mvrss_eigenchol(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP );
        NumericVector __result = calc_mvrss_eigenchol(X, Y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_mvrss_eigenqr
NumericVector calc_mvrss_eigenqr(const NumericMatrix X, const NumericMatrix Y);
RcppExport SEXP qtl2_calc_mvrss_eigenqr(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP );
        NumericVector __result = calc_mvrss_eigenqr(X, Y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// calc_rss_lapack
NumericVector calc_rss_lapack(const NumericMatrix X, const NumericMatrix Y, bool skip_dgels = false, double tol = 1e-10);
RcppExport SEXP qtl2_calc_rss_lapack(SEXP XSEXP, SEXP YSEXP, SEXP skip_dgelsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP );
        Rcpp::traits::input_parameter< bool >::type skip_dgels(skip_dgelsSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericVector __result = calc_rss_lapack(X, Y, skip_dgels, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// random_int
IntegerVector random_int(const int n, const int low, const int high);
RcppExport SEXP qtl2_random_int(SEXP nSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n(nSEXP );
        Rcpp::traits::input_parameter< const int >::type low(lowSEXP );
        Rcpp::traits::input_parameter< const int >::type high(highSEXP );
        IntegerVector __result = random_int(n, low, high);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// get_permutation
IntegerVector get_permutation(const int n);
RcppExport SEXP qtl2_get_permutation(SEXP nSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n(nSEXP );
        IntegerVector __result = get_permutation(n);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// permute_nvector
NumericMatrix permute_nvector(const int n, const NumericVector x);
RcppExport SEXP qtl2_permute_nvector(SEXP nSEXP, SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n(nSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP );
        NumericMatrix __result = permute_nvector(n, x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// permute_ivector
IntegerMatrix permute_ivector(const int n, const IntegerVector x);
RcppExport SEXP qtl2_permute_ivector(SEXP nSEXP, SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const int >::type n(nSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type x(xSEXP );
        IntegerMatrix __result = permute_ivector(n, x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
