// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// interpolate_map
NumericVector interpolate_map(const NumericVector& oldpos, const NumericVector& oldmap, const NumericVector& newmap);
RcppExport SEXP qtl2scan_interpolate_map(SEXP oldposSEXP, SEXP oldmapSEXP, SEXP newmapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type oldpos(oldposSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type oldmap(oldmapSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type newmap(newmapSEXP);
    __result = Rcpp::wrap(interpolate_map(oldpos, oldmap, newmap));
    return __result;
END_RCPP
}
// fit_linreg_eigenchol
List fit_linreg_eigenchol(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_fit_linreg_eigenchol(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(fit_linreg_eigenchol(X, y));
    return __result;
END_RCPP
}
// calc_rss_eigenchol
double calc_rss_eigenchol(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_calc_rss_eigenchol(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(calc_rss_eigenchol(X, y));
    return __result;
END_RCPP
}
// fit_linreg_eigenqr
List fit_linreg_eigenqr(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_fit_linreg_eigenqr(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(fit_linreg_eigenqr(X, y));
    return __result;
END_RCPP
}
// calc_rss_eigenqr
double calc_rss_eigenqr(const NumericMatrix X, const NumericVector y);
RcppExport SEXP qtl2scan_calc_rss_eigenqr(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(calc_rss_eigenqr(X, y));
    return __result;
END_RCPP
}
// calc_mvrss_eigenchol
NumericVector calc_mvrss_eigenchol(const NumericMatrix X, const NumericMatrix Y);
RcppExport SEXP qtl2scan_calc_mvrss_eigenchol(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP);
    __result = Rcpp::wrap(calc_mvrss_eigenchol(X, Y));
    return __result;
END_RCPP
}
// calc_mvrss_eigenqr
NumericVector calc_mvrss_eigenqr(const NumericMatrix X, const NumericMatrix Y);
RcppExport SEXP qtl2scan_calc_mvrss_eigenqr(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP);
    __result = Rcpp::wrap(calc_mvrss_eigenqr(X, Y));
    return __result;
END_RCPP
}
// calc_rss_lapack
NumericVector calc_rss_lapack(const NumericMatrix X, const NumericMatrix Y, const bool skip_dgels, const double tol);
RcppExport SEXP qtl2scan_calc_rss_lapack(SEXP XSEXP, SEXP YSEXP, SEXP skip_dgelsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool >::type skip_dgels(skip_dgelsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(calc_rss_lapack(X, Y, skip_dgels, tol));
    return __result;
END_RCPP
}
// calc_resid_lapack
NumericMatrix calc_resid_lapack(const NumericMatrix X, const NumericMatrix Y, const bool skip_dgels, const double tol);
RcppExport SEXP qtl2scan_calc_resid_lapack(SEXP XSEXP, SEXP YSEXP, SEXP skip_dgelsSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool >::type skip_dgels(skip_dgelsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    __result = Rcpp::wrap(calc_resid_lapack(X, Y, skip_dgels, tol));
    return __result;
END_RCPP
}
// cbind_imatrix
IntegerMatrix cbind_imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2);
RcppExport SEXP qtl2scan_cbind_imatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(cbind_imatrix(mat1, mat2));
    return __result;
END_RCPP
}
// cbind_3imatrix
IntegerMatrix cbind_3imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2, const IntegerMatrix& mat3);
RcppExport SEXP qtl2scan_cbind_3imatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(cbind_3imatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
// cbind_nmatrix
NumericMatrix cbind_nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2);
RcppExport SEXP qtl2scan_cbind_nmatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(cbind_nmatrix(mat1, mat2));
    return __result;
END_RCPP
}
// cbind_3nmatrix
NumericMatrix cbind_3nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2, const NumericMatrix& mat3);
RcppExport SEXP qtl2scan_cbind_3nmatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(cbind_3nmatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
// rbind_imatrix
IntegerMatrix rbind_imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2);
RcppExport SEXP qtl2scan_rbind_imatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(rbind_imatrix(mat1, mat2));
    return __result;
END_RCPP
}
// rbind_3imatrix
IntegerMatrix rbind_3imatrix(const IntegerMatrix& mat1, const IntegerMatrix& mat2, const IntegerMatrix& mat3);
RcppExport SEXP qtl2scan_rbind_3imatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(rbind_3imatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
// rbind_nmatrix
NumericMatrix rbind_nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2);
RcppExport SEXP qtl2scan_rbind_nmatrix(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(rbind_nmatrix(mat1, mat2));
    return __result;
END_RCPP
}
// rbind_3nmatrix
NumericMatrix rbind_3nmatrix(const NumericMatrix& mat1, const NumericMatrix& mat2, const NumericMatrix& mat3);
RcppExport SEXP qtl2scan_rbind_3nmatrix(SEXP mat1SEXP, SEXP mat2SEXP, SEXP mat3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat2(mat2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat3(mat3SEXP);
    __result = Rcpp::wrap(rbind_3nmatrix(mat1, mat2, mat3));
    return __result;
END_RCPP
}
// random_int
IntegerVector random_int(const int n, const int low, const int high);
RcppExport SEXP qtl2scan_random_int(SEXP nSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type low(lowSEXP);
    Rcpp::traits::input_parameter< const int >::type high(highSEXP);
    __result = Rcpp::wrap(random_int(n, low, high));
    return __result;
END_RCPP
}
// get_permutation
IntegerVector get_permutation(const int n);
RcppExport SEXP qtl2scan_get_permutation(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    __result = Rcpp::wrap(get_permutation(n));
    return __result;
END_RCPP
}
// permute_nvector
NumericMatrix permute_nvector(const int n_perm, const NumericVector x);
RcppExport SEXP qtl2scan_permute_nvector(SEXP n_permSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(permute_nvector(n_perm, x));
    return __result;
END_RCPP
}
// permute_ivector
IntegerMatrix permute_ivector(const int n_perm, const IntegerVector x);
RcppExport SEXP qtl2scan_permute_ivector(SEXP n_permSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type x(xSEXP);
    __result = Rcpp::wrap(permute_ivector(n_perm, x));
    return __result;
END_RCPP
}
// permute_nvector_stratified
NumericMatrix permute_nvector_stratified(const int n_perm, const NumericVector& x, const IntegerVector& strata, int n_strata);
RcppExport SEXP qtl2scan_permute_nvector_stratified(SEXP n_permSEXP, SEXP xSEXP, SEXP strataSEXP, SEXP n_strataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< int >::type n_strata(n_strataSEXP);
    __result = Rcpp::wrap(permute_nvector_stratified(n_perm, x, strata, n_strata));
    return __result;
END_RCPP
}
// permute_ivector_stratified
IntegerMatrix permute_ivector_stratified(const int n_perm, const IntegerVector& x, const IntegerVector& strata, int n_strata);
RcppExport SEXP qtl2scan_permute_ivector_stratified(SEXP n_permSEXP, SEXP xSEXP, SEXP strataSEXP, SEXP n_strataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< int >::type n_strata(n_strataSEXP);
    __result = Rcpp::wrap(permute_ivector_stratified(n_perm, x, strata, n_strata));
    return __result;
END_RCPP
}
